import json
import logging
import os
from telethon import TelegramClient, events
from telethon.tl.types import MessageMediaEmpty, MessageMediaUnsupported

# ------------------ CONFIGURATION --------------------

# ‡§Ø‡•á ‡§Æ‡§æ‡§® my.telegram.org ‡§∏‡•á ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡•á‡§Ç
# ‡§á‡§®‡•ç‡§π‡•á‡§Ç ‡§∏‡•Ä‡§ß‡•á ‡§Ø‡§π‡§æ‡§Ç ‡§≤‡§ø‡§ñ‡§®‡•á ‡§ï‡•á ‡§¨‡§ú‡§æ‡§Ø ‡§è‡§®‡§µ‡§æ‡§Ø‡§∞‡§®‡§Æ‡•á‡§Ç‡§ü ‡§µ‡•á‡§∞‡§ø‡§è‡§¨‡§≤ ‡§Æ‡•á‡§Ç ‡§∞‡§ñ‡§®‡§æ ‡§¨‡•á‡§π‡§§‡§∞ ‡§π‡•à
API_ID = int(os.environ.get("API_ID", 12345)) # ‡§Ö‡§™‡§®‡§æ API ID ‡§Ø‡§π‡§æ‡§Å ‡§°‡§æ‡§≤‡•á‡§Ç
API_HASH = os.environ.get("API_HASH", "your_api_hash") # ‡§Ö‡§™‡§®‡§æ API HASH ‡§Ø‡§π‡§æ‡§Å ‡§°‡§æ‡§≤‡•á‡§Ç

# ‡§Ü‡§™‡§ï‡•á ‡§¨‡•â‡§ü ‡§ï‡§æ ‡§ü‡•ã‡§ï‡§®, ‡§ú‡§ø‡§∏‡•á BotFather ‡§∏‡•á ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à
BOT_TOKEN = os.environ.get("BOT_TOKEN", "your_bot_token")

# ‡§Ü‡§™‡§ï‡•Ä ‡§®‡•ç‡§Ø‡•Ç‡§Æ‡•á‡§∞‡§ø‡§ï ‡§ü‡•á‡§≤‡•Ä‡§ó‡•ç‡§∞‡§æ‡§Æ ‡§Ø‡•Ç‡§ú‡§∞ ‡§Ü‡§à‡§°‡•Ä (‡§¨‡•â‡§ü ‡§ï‡§æ ‡§Æ‡§æ‡§≤‡§ø‡§ï)
OWNER_ID = int(os.environ.get("OWNER_ID", 1251962299))

# ‡§∏‡•á‡§∂‡§® ‡§´‡§º‡§æ‡§á‡§≤ ‡§ï‡§æ ‡§®‡§æ‡§Æ (Telethon ‡§á‡§∏‡•á ‡§≤‡•â‡§ó‡§ø‡§® ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§Ø‡§æ‡§¶ ‡§∞‡§ñ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§§‡§æ ‡§π‡•à)
SESSION_NAME = "my_userbot_session"
SETTINGS_FILE = "settings.json"

# ----------------------------------------------------

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§ï‡•ã ‡§≤‡•ã‡§° ‡§Ø‡§æ ‡§á‡§®‡§ø‡§∂‡§ø‡§Ø‡§≤‡§æ‡§á‡§ú‡§º ‡§ï‡§∞‡•á‡§Ç
def load_settings():
    try:
        with open(SETTINGS_FILE, "r") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {
            "source_channels": [],
            "destination_channel": None,
            "working": False,
            "owner_id": OWNER_ID, # ‡§Æ‡§æ‡§≤‡§ø‡§ï ‡§ï‡•ã ‡§≠‡•Ä ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§Æ‡•á‡§Ç ‡§∏‡§π‡•á‡§ú‡•á‡§Ç
        }

def save_settings(settings):
    with open(SETTINGS_FILE, "w") as f:
        json.dump(settings, f, indent=4)

# Telethon ‡§ï‡•ç‡§≤‡§æ‡§á‡§Ç‡§ü ‡§ï‡•ã ‡§è‡§ï ‡§Ø‡•Ç‡§ú‡§∞ ‡§ï‡•á ‡§∞‡•Ç‡§™ ‡§Æ‡•á‡§Ç ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç (‡§∏‡•Å‡§®‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è)
user_client = TelegramClient(SESSION_NAME, API_ID, API_HASH)
# Telethon ‡§ï‡•ç‡§≤‡§æ‡§á‡§Ç‡§ü ‡§ï‡•ã ‡§è‡§ï ‡§¨‡•â‡§ü ‡§ï‡•á ‡§∞‡•Ç‡§™ ‡§Æ‡•á‡§Ç ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç (‡§≠‡•á‡§ú‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è)
bot_client = TelegramClient('bot_session', API_ID, API_HASH).start(bot_token=BOT_TOKEN)


@user_client.on(events.NewMessage)
async def command_handler(event):
    """‡§ï‡§Æ‡§æ‡§Ç‡§°‡•ç‡§∏ ‡§ï‡•ã ‡§π‡•à‡§Ç‡§°‡§≤ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è"""
    # ‡§ï‡•á‡§µ‡§≤ ‡§Æ‡§æ‡§≤‡§ø‡§ï ‡§π‡•Ä ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•à
    if event.sender_id != OWNER_ID:
        return

    text = event.raw_text.lower()
    parts = text.split()
    command = parts[0]
    
    settings = load_settings()

    if command == "/start":
        await event.respond(
            "‚úÖ ‡§Ø‡•Ç‡§ú‡§∞‡§¨‡•â‡§ü-‡§π‡§æ‡§á‡§¨‡•ç‡§∞‡§ø‡§° ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§π‡•à!\n\n"
            "‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•á ‡§Ø‡•Ç‡§ú‡§∞ ‡§Ö‡§ï‡§æ‡§â‡§Ç‡§ü ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§ï‡•á ‡§™‡§¨‡•ç‡§≤‡§ø‡§ï ‡§ö‡•à‡§®‡§≤‡•ã‡§Ç ‡§ï‡•ã ‡§∏‡•Å‡§®‡•Ç‡§Ç‡§ó‡§æ ‡§î‡§∞ ‡§Ü‡§™‡§ï‡•á ‡§¨‡•â‡§ü ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§ï‡•á ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§≠‡•á‡§ú‡•Ç‡§Ç‡§ó‡§æ‡•§\n\n"
            "‡§ï‡§Æ‡§æ‡§Ç‡§°‡•ç‡§∏:\n"
            "`/addsource @channel_username`\n"
            "`/removesource @channel_username`\n"
            "`/setdest @channel_username_or_id`\n"
            "`/list`\n"
            "`/startwork`\n"
            "`/stopwork`"
        )
    elif command == "/addsource" and len(parts) > 1:
        channel = parts[1].strip()
        if channel not in settings["source_channels"]:
            settings["source_channels"].append(channel)
            save_settings(settings)
            await event.respond(f"‚úÖ ‡§∏‡•ã‡§∞‡•ç‡§∏ ‡§ö‡•à‡§®‡§≤ ‡§ú‡•ã‡§°‡§º‡§æ ‡§ó‡§Ø‡§æ: {channel}")
        else:
            await event.respond(f"‚ÑπÔ∏è {channel} ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§π‡•Ä ‡§∏‡•ã‡§∞‡•ç‡§∏ ‡§Æ‡•á‡§Ç ‡§π‡•à‡•§")

    elif command == "/removesource" and len(parts) > 1:
        channel = parts[1].strip()
        if channel in settings["source_channels"]:
            settings["source_channels"].remove(channel)
            save_settings(settings)
            await event.respond(f"‚úÖ ‡§∏‡•ã‡§∞‡•ç‡§∏ ‡§ö‡•à‡§®‡§≤ ‡§π‡§ü‡§æ‡§Ø‡§æ ‡§ó‡§Ø‡§æ: {channel}")
        else:
            await event.respond(f"‚ÑπÔ∏è {channel} ‡§∏‡•ã‡§∞‡•ç‡§∏ ‡§Æ‡•á‡§Ç ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡•§")
            
    elif command == "/setdest" and len(parts) > 1:
        dest = parts[1].strip()
        try:
            # ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç ‡§ï‡§ø ‡§ï‡•ç‡§Ø‡§æ ‡§Ø‡§π ‡§è‡§ï ‡§®‡•ç‡§Ø‡•Ç‡§Æ‡•á‡§∞‡§ø‡§ï ‡§Ü‡§à‡§°‡•Ä ‡§π‡•à
            settings["destination_channel"] = int(dest)
        except ValueError:
            # ‡§µ‡§∞‡•ç‡§®‡§æ ‡§á‡§∏‡•á ‡§Ø‡•Ç‡§ú‡§∞‡§®‡•á‡§Æ ‡§Æ‡§æ‡§®‡•á‡§Ç
            settings["destination_channel"] = dest
        save_settings(settings)
        await event.respond(f"‚úÖ ‡§°‡•á‡§∏‡•ç‡§ü‡§ø‡§®‡•á‡§∂‡§® ‡§ö‡•à‡§®‡§≤ ‡§∏‡•á‡§ü ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ: {dest}")
        
    elif command == "/list":
        sources = "\n".join(settings['source_channels']) if settings['source_channels'] else "‡§ï‡•ã‡§à ‡§®‡§π‡•Ä‡§Ç"
        dest = settings['destination_channel'] or "‡§∏‡•á‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à"
        status = '‡§ö‡§æ‡§≤‡•Ç' if settings['working'] else '‡§¨‡§Ç‡§¶'
        await event.respond(
            f"üìã **‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏**\n\n"
            f"**‡§∏‡•ã‡§∞‡•ç‡§∏ ‡§ö‡•à‡§®‡§≤:**\n{sources}\n\n"
            f"**‡§°‡•á‡§∏‡•ç‡§ü‡§ø‡§®‡•á‡§∂‡§® ‡§ö‡•à‡§®‡§≤:** {dest}\n\n"
            f"**‡§∏‡•ç‡§ü‡•á‡§ü‡§∏:** {status}",
            parse_mode='md'
        )

    elif command == "/startwork":
        settings["working"] = True
        save_settings(settings)
        await event.respond("‚úÖ ‡§ï‡§æ‡§Æ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§ ‡§®‡§è ‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü ‡§∏‡§Ç‡§¶‡•á‡§∂‡•ã‡§Ç ‡§ï‡•ã ‡§ï‡•â‡§™‡•Ä ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§è‡§ó‡§æ‡•§")

    elif command == "/stopwork":
        settings["working"] = False
        save_settings(settings)
        await event.respond("üõë ‡§ï‡§æ‡§Æ ‡§∞‡•ã‡§ï ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§")


@user_client.on(events.NewMessage)
async def message_copier(event):
    """‡§∏‡§Ç‡§¶‡•á‡§∂‡•ã‡§Ç ‡§ï‡•ã ‡§ï‡•â‡§™‡•Ä ‡§ï‡§∞‡§®‡•á ‡§µ‡§æ‡§≤‡§æ ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§π‡•à‡§Ç‡§°‡§≤‡§∞"""
    settings = load_settings()

    # ‡§Ö‡§ó‡§∞ ‡§¨‡•â‡§ü ‡§ï‡§æ‡§Æ ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•à, ‡§Ø‡§æ ‡§ï‡•ã‡§à ‡§°‡•á‡§∏‡•ç‡§ü‡§ø‡§®‡•á‡§∂‡§® ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à, ‡§§‡•ã ‡§ï‡•Å‡§õ ‡§® ‡§ï‡§∞‡•á‡§Ç
    if not settings["working"] or not settings["destination_channel"]:
        return

    # ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç ‡§ï‡§ø ‡§ï‡•ç‡§Ø‡§æ ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§ï‡§ø‡§∏‡•Ä ‡§∏‡•ã‡§∞‡•ç‡§∏ ‡§ö‡•à‡§®‡§≤ ‡§∏‡•á ‡§π‡•à
    # ‡§π‡§Æ ‡§ö‡•à‡§®‡§≤ ‡§ï‡•á ‡§Ø‡•Ç‡§ú‡§∞‡§®‡•á‡§Æ ‡§Ø‡§æ ‡§Ü‡§à‡§°‡•Ä ‡§ï‡•Ä ‡§ú‡§æ‡§Ç‡§ö ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç
    chat = await event.get_chat()
    chat_username = f"@{chat.username}" if chat.username else None
    
    if chat.id not in settings["source_channels"] and chat_username not in settings["source_channels"]:
        return
        
    # --- ‡§ï‡•á‡§µ‡§≤ ‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü ‡§∏‡§Ç‡§¶‡•á‡§∂‡•ã‡§Ç ‡§ï‡•ã ‡§ï‡•â‡§™‡•Ä ‡§ï‡§∞‡•á‡§Ç ---
    # 1. ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§Æ‡•á‡§Ç ‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü ‡§π‡•à‡•§
    # 2. ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§Æ‡•á‡§Ç ‡§ï‡•ã‡§à ‡§Æ‡•Ä‡§°‡§ø‡§Ø‡§æ (‡§´‡•ã‡§ü‡•ã, ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã, ‡§Ü‡§¶‡§ø) ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§
    if event.message.text and (event.message.media is None or isinstance(event.message.media, (MessageMediaEmpty, MessageMediaUnsupported))):
        message_text = event.message.text
        
        try:
            # ‡§¨‡•â‡§ü ‡§ï‡•ç‡§≤‡§æ‡§á‡§Ç‡§ü ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§ï‡•á ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§≠‡•á‡§ú‡•á‡§Ç
            await bot_client.send_message(settings["destination_channel"], message_text)
            logger.info(f"‚úÖ '{chat.title}' ‡§∏‡•á ‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§ï‡•â‡§™‡•Ä ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ‡•§")
        except Exception as e:
            logger.error(f"‡§°‡•á‡§∏‡•ç‡§ü‡§ø‡§®‡•á‡§∂‡§® ‡§ö‡•à‡§®‡§≤ '{settings['destination_channel']}' ‡§™‡§∞ ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§≠‡•á‡§ú‡§®‡•á ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: {e}")
            # ‡§Ö‡§ó‡§∞ ‡§ï‡•ã‡§à ‡§ó‡§Ç‡§≠‡•Ä‡§∞ ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§π‡•à, ‡§§‡•ã ‡§Æ‡§æ‡§≤‡§ø‡§ï ‡§ï‡•ã ‡§∏‡•Ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç
            if "chat not found" in str(e).lower() or "invalid peer" in str(e).lower():
                settings["working"] = False
                save_settings(settings)
                await user_client.send_message(OWNER_ID, f"üö® ‡§°‡•á‡§∏‡•ç‡§ü‡§ø‡§®‡•á‡§∂‡§® ‡§ö‡•à‡§®‡§≤ '{settings['destination_channel']}' ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§ï‡•á ‡§ï‡§æ‡§∞‡§£ ‡§ï‡§æ‡§Æ ‡§∞‡•ã‡§ï ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç‡•§")

async def main():
    # ‡§™‡§π‡§≤‡•á ‡§Ø‡•Ç‡§ú‡§∞ ‡§ï‡•ç‡§≤‡§æ‡§á‡§Ç‡§ü ‡§Æ‡•á‡§Ç ‡§≤‡•â‡§ó ‡§á‡§® ‡§ï‡§∞‡•á‡§Ç
    await user_client.start()
    logger.info("‡§Ø‡•Ç‡§ú‡§∞ ‡§ï‡•ç‡§≤‡§æ‡§á‡§Ç‡§ü (‡§∏‡•Å‡§®‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è) ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•ã ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§")
    
    # ‡§¨‡•â‡§ü ‡§ï‡•ç‡§≤‡§æ‡§á‡§Ç‡§ü ‡§™‡§π‡§≤‡•á ‡§π‡•Ä ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•ã ‡§ö‡•Å‡§ï‡§æ ‡§π‡•à
    logger.info("‡§¨‡•â‡§ü ‡§ï‡•ç‡§≤‡§æ‡§á‡§Ç‡§ü (‡§≠‡•á‡§ú‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è) ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•ã ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§")
    
    # ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø ‡§Ü‡§™‡§ï‡§æ ‡§Ø‡•Ç‡§ú‡§∞ ‡§Ö‡§ï‡§æ‡§â‡§Ç‡§ü ‡§∏‡•ã‡§∞‡•ç‡§∏ ‡§ö‡•à‡§®‡§≤‡•ã‡§Ç ‡§ï‡§æ ‡§∏‡§¶‡§∏‡•ç‡§Ø ‡§π‡•à
    settings = load_settings()
    for channel in settings.get("source_channels", []):
        try:
            await user_client.get_entity(channel)
            logger.info(f"‡§Ü‡§™‡§ï‡§æ ‡§Ø‡•Ç‡§ú‡§∞ ‡§Ö‡§ï‡§æ‡§â‡§Ç‡§ü '{channel}' ‡§ï‡§æ ‡§∏‡§¶‡§∏‡•ç‡§Ø ‡§π‡•à‡•§")
        except Exception:
            logger.warning(f"‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä: ‡§Ü‡§™‡§ï‡§æ ‡§Ø‡•Ç‡§ú‡§∞ ‡§Ö‡§ï‡§æ‡§â‡§Ç‡§ü '{channel}' ‡§ï‡§æ ‡§∏‡§¶‡§∏‡•ç‡§Ø ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à ‡§Ø‡§æ ‡§ö‡•à‡§®‡§≤ ‡§Æ‡•å‡§ú‡•Ç‡§¶ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§á‡§∏‡•á ‡§ú‡•ç‡§µ‡§æ‡§á‡§® ‡§ï‡§∞‡•á‡§Ç‡•§")

    print("\n‚úÖ ‡§¨‡•â‡§ü ‡§Ö‡§¨ ‡§ö‡§≤ ‡§∞‡§π‡§æ ‡§π‡•à‡•§ ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§≠‡•á‡§ú‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§™‡§®‡•á ‡§Ö‡§ï‡§æ‡§â‡§Ç‡§ü ‡§∏‡•á ‡§ñ‡•Å‡§¶ ‡§ï‡•ã ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§≠‡•á‡§ú‡•á‡§Ç (‡§Ø‡§æ ‡§ï‡§ø‡§∏‡•Ä ‡§≠‡•Ä ‡§ö‡•à‡§ü ‡§Æ‡•á‡§Ç)‡•§")
    print("‡§¨‡•â‡§ü ‡§ï‡•ã ‡§∞‡•ã‡§ï‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è CTRL+C ‡§¶‡§¨‡§æ‡§è‡§Å‡•§")
    
    # ‡§∏‡•ç‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§ü ‡§ï‡•ã ‡§π‡§Æ‡•á‡§∂‡§æ ‡§ö‡§æ‡§≤‡•Ç ‡§∞‡§ñ‡•á‡§Ç
    await user_client.run_until_disconnected()


if __name__ == "__main__":
    with user_client:
        user_client.loop.run_until_complete(main())
